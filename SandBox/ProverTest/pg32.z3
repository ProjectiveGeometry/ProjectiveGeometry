(echo "starting Z3, working on pg(3,2)...")

(echo "--- defining points and lines ---")

(declare-datatypes () ((Point A B C D E F G  H  I J  K  L  M  N  O))) ; points 
(declare-datatypes () ((Line ABC ADE AFG AHI AKJ ALM ANO BEG BIK BMO BHJ BNL BDF CHK CLO CDG CMN CEF CIJ DKO DIM DJN DHL EJO EIL EKN EHM FIO FHN FJL FKM GHO GIN GJM GKL)))

(echo "--- defining the incidence relation ---")

(declare-fun i (Point Line) Bool)

; ABC
(assert (i A ABC))
(assert (i B ABC))
(assert (i C ABC))
(assert (not (i D ABC)))
(assert (not (i E ABC)))
(assert (not (i F ABC)))
(assert (not (i G ABC)))
(assert (not (i H ABC)))
(assert (not (i I ABC)))
(assert (not (i J ABC)))
(assert (not (i K ABC)))
(assert (not (i L ABC)))
(assert (not (i M ABC)))
(assert (not (i N ABC)))
(assert (not (i O ABC)))

; ADE
(assert (i A ADE))
(assert (not (i B ADE)))
(assert (not (i C ADE)))
(assert (i D ADE))
(assert (i E ADE))
(assert (not (i F ADE)))
(assert (not (i G ADE)))
(assert (not (i H ADE)))
(assert (not (i I ADE)))
(assert (not (i J ADE)))
(assert (not (i K ADE)))
(assert (not (i L ADE)))
(assert (not (i M ADE)))
(assert (not (i N ADE)))
(assert (not (i O ADE)))

; AFG
(assert (i A AFG))
(assert (not (i B AFG)))
(assert (not (i C AFG)))
(assert (not (i D AFG)))
(assert (not (i E AFG)))
(assert (i F AFG))
(assert (i G AFG))
(assert (not (i H AFG)))
(assert (not (i I AFG)))
(assert (not (i J AFG)))
(assert (not (i K AFG)))
(assert (not (i L AFG)))
(assert (not (i M AFG)))
(assert (not (i N AFG)))
(assert (not (i O AFG)))

; AHI
(assert (i A AHI))
(assert (not (i B AHI)))
(assert (not (i C AHI)))
(assert (not (i D AHI)))
(assert (not (i E AHI)))
(assert (not (i F AHI)))
(assert (not (i G AHI)))
(assert (i H AHI))
(assert (i I AHI))
(assert (not (i J AHI)))
(assert (not (i K AHI)))
(assert (not (i L AHI)))
(assert (not (i M AHI)))
(assert (not (i N AHI)))
(assert (not (i O AHI)))

; AKJ
(assert (i A AKJ))
(assert (not (i B AKJ)))
(assert (not (i C AKJ)))
(assert (not (i D AKJ)))
(assert (not (i E AKJ)))
(assert (not (i F AKJ)))
(assert (not (i G AKJ)))
(assert (not (i H AKJ)))
(assert (not (i I AKJ)))
(assert (i J AKJ))
(assert (i K AKJ))
(assert (not (i L AKJ)))
(assert (not (i M AKJ)))
(assert (not (i N AKJ)))
(assert (not (i O AKJ)))

; ALM
(assert (i A ALM))
(assert (not (i B ALM)))
(assert (not (i C ALM)))
(assert (not (i D ALM)))
(assert (not (i E ALM)))
(assert (not (i F ALM)))
(assert (not (i G ALM)))
(assert (not (i H ALM)))
(assert (not (i I ALM)))
(assert (not (i J ALM)))
(assert (not (i K ALM)))
(assert (i L ALM))
(assert (i M ALM))
(assert (not (i N ALM)))
(assert (not (i O ALM)))

; ANO
(assert (i A ANO))
(assert (not (i B ANO)))
(assert (not (i C ANO)))
(assert (not (i D ANO)))
(assert (not (i E ANO)))
(assert (not (i F ANO)))
(assert (not (i G ANO)))
(assert (not (i H ANO)))
(assert (not (i I ANO)))
(assert (not (i J ANO)))
(assert (not (i K ANO)))
(assert (not (i L ANO)))
(assert (not (i M ANO)))
(assert (i N ANO))
(assert (i O ANO))

; BEG
(assert (not (i A BEG)))
(assert (i B BEG))
(assert (not (i C BEG)))
(assert (not (i D BEG)))
(assert (i E BEG))
(assert (not (i F BEG)))
(assert (i G BEG))
(assert (not (i H BEG)))
(assert (not (i I BEG)))
(assert (not (i J BEG)))
(assert (not (i K BEG)))
(assert (not (i L BEG)))
(assert (not (i M BEG)))
(assert (not (i N BEG)))
(assert (not (i O BEG)))

; BIK
(assert (not (i A BIK)))
(assert (i B BIK))
(assert (not (i C BIK)))
(assert (not (i D BIK)))
(assert (not (i E BIK)))
(assert (not (i F BIK)))
(assert (not (i G BIK)))
(assert (not (i H BIK)))
(assert (i I BIK))
(assert (not (i J BIK)))
(assert (i K BIK))
(assert (not (i L BIK)))
(assert (not (i M BIK)))
(assert (not (i N BIK)))
(assert (not (i O BIK)))

; BMO
(assert (not (i A BMO)))
(assert (i B BMO))
(assert (not (i C BMO)))
(assert (not (i D BMO)))
(assert (not (i E BMO)))
(assert (not (i F BMO)))
(assert (not (i G BMO)))
(assert (not (i H BMO)))
(assert (not (i I BMO)))
(assert (not (i J BMO)))
(assert (not (i K BMO)))
(assert (not (i L BMO)))
(assert (i M BMO))
(assert (not (i N BMO)))
(assert (i O BMO))

; BHJ
(assert (not (i A BHJ)))
(assert (i B BHJ))
(assert (not (i C BHJ)))
(assert (not (i D BHJ)))
(assert (not (i E BHJ)))
(assert (not (i F BHJ)))
(assert (not (i G BHJ)))
(assert (i H BHJ))
(assert (not (i I BHJ)))
(assert (i J BHJ))
(assert (not (i K BHJ)))
(assert (not (i L BHJ)))
(assert (not (i M BHJ)))
(assert (not (i N BHJ)))
(assert (not (i O BHJ)))

; BNL
(assert (not (i A BNL)))
(assert (i B BNL))
(assert (not (i C BNL)))
(assert (not (i D BNL)))
(assert (not (i E BNL)))
(assert (not (i F BNL)))
(assert (not (i G BNL)))
(assert (not (i H BNL)))
(assert (not (i I BNL)))
(assert (not (i J BNL)))
(assert (not (i K BNL)))
(assert (i L BNL))
(assert (not (i M BNL)))
(assert (i N BNL))
(assert (not (i O BNL)))

; BDF
(assert (not (i A BDF)))
(assert (i B BDF))
(assert (not (i C BDF)))
(assert (i D BDF))
(assert (not (i E BDF)))
(assert (i F BDF))
(assert (not (i G BDF)))
(assert (not (i H BDF)))
(assert (not (i I BDF)))
(assert (not (i J BDF)))
(assert (not (i K BDF)))
(assert (not (i L BDF)))
(assert (not (i M BDF)))
(assert (not (i N BDF)))
(assert (not (i O BDF)))

; CHK
(assert (not (i A CHK)))
(assert (not (i B CHK)))
(assert (i C CHK))
(assert (not (i D CHK)))
(assert (not (i E CHK)))
(assert (not (i F CHK)))
(assert (not (i G CHK)))
(assert (i H CHK))
(assert (not (i I CHK)))
(assert (not (i J CHK)))
(assert (i K CHK))
(assert (not (i L CHK)))
(assert (not (i M CHK)))
(assert (not (i N CHK)))
(assert (not (i O CHK)))

; CLO
(assert (not (i A CLO)))
(assert (not (i B CLO)))
(assert (i C CLO))
(assert (not (i D CLO)))
(assert (not (i E CLO)))
(assert (not (i F CLO)))
(assert (not (i G CLO)))
(assert (not (i H CLO)))
(assert (not (i I CLO)))
(assert (not (i J CLO)))
(assert (not (i K CLO)))
(assert (i L CLO))
(assert (not (i M CLO)))
(assert (not (i N CLO)))
(assert (i O CLO))

; CDG
(assert (not (i A CDG)))
(assert (not (i B CDG)))
(assert (i C CDG))
(assert (i D CDG))
(assert (not (i E CDG)))
(assert (not (i F CDG)))
(assert (i G CDG))
(assert (not (i H CDG)))
(assert (not (i I CDG)))
(assert (not (i J CDG)))
(assert (not (i K CDG)))
(assert (not (i L CDG)))
(assert (not (i M CDG)))
(assert (not (i N CDG)))
(assert (not (i O CDG)))

; CMN
(assert (not (i A CMN)))
(assert (not (i B CMN)))
(assert (i C CMN))
(assert (not (i D CMN)))
(assert (not (i E CMN)))
(assert (not (i F CMN)))
(assert (not (i G CMN)))
(assert (not (i H CMN)))
(assert (not (i I CMN)))
(assert (not (i J CMN)))
(assert (not (i K CMN)))
(assert (not (i L CMN)))
(assert (i M CMN))
(assert (i N CMN))
(assert (not (i O CMN)))

; CEF
(assert (not (i A CEF)))
(assert (not (i B CEF)))
(assert (i C CEF))
(assert (not (i D CEF)))
(assert (i E CEF))
(assert (i F CEF))
(assert (not (i G CEF)))
(assert (not (i H CEF)))
(assert (not (i I CEF)))
(assert (not (i J CEF)))
(assert (not (i K CEF)))
(assert (not (i L CEF)))
(assert (not (i M CEF)))
(assert (not (i N CEF)))
(assert (not (i O CEF)))

; CIJ
(assert (not (i A CIJ)))
(assert (not (i B CIJ)))
(assert (i C CIJ))
(assert (not (i D CIJ)))
(assert (not (i E CIJ)))
(assert (not (i F CIJ)))
(assert (not (i G CIJ)))
(assert (not (i H CIJ)))
(assert (i I CIJ))
(assert (i J CIJ))
(assert (not (i K CIJ)))
(assert (not (i L CIJ)))
(assert (not (i M CIJ)))
(assert (not (i N CIJ)))
(assert (not (i O CIJ)))

; DKO
(assert (not (i A DKO)))
(assert (not (i B DKO)))
(assert (not (i C DKO)))
(assert (i D DKO))
(assert (not (i E DKO)))
(assert (not (i F DKO)))
(assert (not (i G DKO)))
(assert (not (i H DKO)))
(assert (not (i I DKO)))
(assert (not (i J DKO)))
(assert (i K DKO))
(assert (not (i L DKO)))
(assert (not (i M DKO)))
(assert (not (i N DKO)))
(assert (i O DKO))

; DIM
(assert (not (i A DIM)))
(assert (not (i B DIM)))
(assert (not (i C DIM)))
(assert (i D DIM))
(assert (not (i E DIM)))
(assert (not (i F DIM)))
(assert (not (i G DIM)))
(assert (not (i H DIM)))
(assert (i I DIM))
(assert (not (i J DIM)))
(assert (not (i K DIM)))
(assert (not (i L DIM)))
(assert (i M DIM))
(assert (not (i N DIM)))
(assert (not (i O DIM)))

; DJN
(assert (not (i A DJN)))
(assert (not (i B DJN)))
(assert (not (i C DJN)))
(assert (i D DJN))
(assert (not (i E DJN)))
(assert (not (i F DJN)))
(assert (not (i G DJN)))
(assert (not (i H DJN)))
(assert (not (i I DJN)))
(assert (i J DJN))
(assert (not (i K DJN)))
(assert (not (i L DJN)))
(assert (not (i M DJN)))
(assert (i N DJN))
(assert (not (i O DJN)))

; DHL
(assert (not (i A DHL)))
(assert (not (i B DHL)))
(assert (not (i C DHL)))
(assert (i D DHL))
(assert (not (i E DHL)))
(assert (not (i F DHL)))
(assert (not (i G DHL)))
(assert (i H DHL))
(assert (not (i I DHL)))
(assert (not (i J DHL)))
(assert (not (i K DHL)))
(assert (i L DHL))
(assert (not (i M DHL)))
(assert (not (i N DHL)))
(assert (not (i O DHL)))

; EJO
(assert (not (i A EJO)))
(assert (not (i B EJO)))
(assert (not (i C EJO)))
(assert (not (i D EJO)))
(assert (i E EJO))
(assert (not (i F EJO)))
(assert (not (i G EJO)))
(assert (not (i H EJO)))
(assert (not (i I EJO)))
(assert (i J EJO))
(assert (not (i K EJO)))
(assert (not (i L EJO)))
(assert (not (i M EJO)))
(assert (not (i N EJO)))
(assert (i O EJO))

; EIL
(assert (not (i A EIL)))
(assert (not (i B EIL)))
(assert (not (i C EIL)))
(assert (not (i D EIL)))
(assert (i E EIL))
(assert (not (i F EIL)))
(assert (not (i G EIL)))
(assert (not (i H EIL)))
(assert (i I EIL))
(assert (not (i J EIL)))
(assert (not (i K EIL)))
(assert (i L EIL))
(assert (not (i M EIL)))
(assert (not (i N EIL)))
(assert (not (i O EIL)))

; EKN
(assert (not (i A EKN)))
(assert (not (i B EKN)))
(assert (not (i C EKN)))
(assert (not (i D EKN)))
(assert (i E EKN))
(assert (not (i F EKN)))
(assert (not (i G EKN)))
(assert (not (i H EKN)))
(assert (not (i I EKN)))
(assert (not (i J EKN)))
(assert (i K EKN))
(assert (not (i L EKN)))
(assert (not (i M EKN)))
(assert (i N EKN))
(assert (not (i O EKN)))

; EHM
(assert (not (i A EHM)))
(assert (not (i B EHM)))
(assert (not (i C EHM)))
(assert (not (i D EHM)))
(assert (i E EHM))
(assert (not (i F EHM)))
(assert (not (i G EHM)))
(assert (i H EHM))
(assert (not (i I EHM)))
(assert (not (i J EHM)))
(assert (not (i K EHM)))
(assert (not (i L EHM)))
(assert (i M EHM))
(assert (not (i N EHM)))
(assert (not (i O EHM)))

; FIO
(assert (not (i A FIO)))
(assert (not (i B FIO)))
(assert (not (i C FIO)))
(assert (not (i D FIO)))
(assert (not (i E FIO)))
(assert (i F FIO))
(assert (not (i G FIO)))
(assert (not (i H FIO)))
(assert (i I FIO))
(assert (not (i J FIO)))
(assert (not (i K FIO)))
(assert (not (i L FIO)))
(assert (not (i M FIO)))
(assert (not (i N FIO)))
(assert (i O FIO))

; FHN
(assert (not (i A FHN)))
(assert (not (i B FHN)))
(assert (not (i C FHN)))
(assert (not (i D FHN)))
(assert (not (i E FHN)))
(assert (i F FHN))
(assert (not (i G FHN)))
(assert (i H FHN))
(assert (not (i I FHN)))
(assert (not (i J FHN)))
(assert (not (i K FHN)))
(assert (not (i L FHN)))
(assert (not (i M FHN)))
(assert (i N FHN))
(assert (not (i O FHN)))

; FJL
(assert (not (i A FJL)))
(assert (not (i B FJL)))
(assert (not (i C FJL)))
(assert (not (i D FJL)))
(assert (not (i E FJL)))
(assert (i F FJL))
(assert (not (i G FJL)))
(assert (not (i H FJL)))
(assert (not (i I FJL)))
(assert (i J FJL))
(assert (not (i K FJL)))
(assert (i L FJL))
(assert (not (i M FJL)))
(assert (not (i N FJL)))
(assert (not (i O FJL)))

; FKM
(assert (not (i A FKM)))
(assert (not (i B FKM)))
(assert (not (i C FKM)))
(assert (not (i D FKM)))
(assert (not (i E FKM)))
(assert (i F FKM))
(assert (not (i G FKM)))
(assert (not (i H FKM)))
(assert (not (i I FKM)))
(assert (not (i J FKM)))
(assert (i K FKM))
(assert (not (i L FKM)))
(assert (i M FKM))
(assert (not (i N FKM)))
(assert (not (i O FKM)))

; GHO
(assert (not (i A GHO)))
(assert (not (i B GHO)))
(assert (not (i C GHO)))
(assert (not (i D GHO)))
(assert (not (i E GHO)))
(assert (not (i F GHO)))
(assert (i G GHO))
(assert (i H GHO))
(assert (not (i I GHO)))
(assert (not (i J GHO)))
(assert (not (i K GHO)))
(assert (not (i L GHO)))
(assert (not (i M GHO)))
(assert (not (i N GHO)))
(assert (i O GHO))

; GIN
(assert (not (i A GIN)))
(assert (not (i B GIN)))
(assert (not (i C GIN)))
(assert (not (i D GIN)))
(assert (not (i E GIN)))
(assert (not (i F GIN)))
(assert (i G GIN))
(assert (not (i H GIN)))
(assert (i I GIN))
(assert (not (i J GIN)))
(assert (not (i K GIN)))
(assert (not (i L GIN)))
(assert (not (i M GIN)))
(assert (i N GIN))
(assert (not (i O GIN)))

; GJM
(assert (not (i A GJM)))
(assert (not (i B GJM)))
(assert (not (i C GJM)))
(assert (not (i D GJM)))
(assert (not (i E GJM)))
(assert (not (i F GJM)))
(assert (i G GJM))
(assert (not (i H GJM)))
(assert (not (i I GJM)))
(assert (i J GJM))
(assert (not (i K GJM)))
(assert (not (i L GJM)))
(assert (i M GJM))
(assert (not (i N GJM)))
(assert (not (i O GJM)))

; GKL
(assert (not (i A GKL)))
(assert (not (i B GKL)))
(assert (not (i C GKL)))
(assert (not (i D GKL)))
(assert (not (i E GKL)))
(assert (not (i F GKL)))
(assert (i G GKL))
(assert (not (i H GKL)))
(assert (not (i I GKL)))
(assert (not (i J GKL)))
(assert (i K GKL))
(assert (i L GKL))
(assert (not (i M GKL)))
(assert (not (i N GKL)))
(assert (not (i O GKL)))

(check-sat)

;(define-fun a1bis () Bool 
;(and (distinct x y z t) (and (i x ABC) (and (i y ABC) (and (i z ABC) (and (i t ABC)))))))
;(assert a1bis)
;(check-sat)

;(define-fun eachP ((x Point) (pred)) (and (pred A) (pred B)))
;(echo "staop")

(push)
(echo "--- checking a1-exists ---")
(assert (forall ((x Point)) (forall ((y Point)) (exists ((l Line)) (and (i x l) (i y l))))))
(check-sat)
(pop)

(push)
(echo "--- checking uniqueness ---")
(assert (forall ((x Point)) (forall ((y Point)) (forall ((l Line)) (forall ((m Line)) (=> (i x l) (=> (i y l) (=> (i x m) (=> (i y m) (or (= x y) (= l m)))))))))))
(check-sat) 
(pop)

;(echo "--- checking a1_unique ---")
;(assert (forall ((x Point)) (forall ((y Point)) (forall ((l1 Line)) (forall ((l2 Line)) (=> (not (= x y)) (=> (i x l1) (=> (i y l1) (=> (i x l2) (=> (i y l2) (= l1 l2)))))))))))
;(check-sat)

;(echo "--- checking a2_unique ---")
;(assert (forall ((l1 Line)) (forall ((l2 Line)) (forall ((x Point)) (forall ((y Point)) (=> (not (= l1 l2)) (=> (i x l1) (=> (i x l2) (=> (i y l1) (=> (i y l2) (= x y)))))))))))
;(check-sat)

(push)
(echo "--- checking a3_1 ---")
(define-fun p_a3_1 ((l Line) (x Point) (y Point) (z Point)) Bool (and (distinct x y z) (and (i x l) (and (i y l) (i z l)))))

(define-fun e_p_a3_1 ((l Line) (x Point) (y Point)) Bool 
(or (p_a3_1 l x y A)
(or (p_a3_1 l x y B)
(or (p_a3_1 l x y C)
(or (p_a3_1 l x y D)
(or (p_a3_1 l x y E)
(or (p_a3_1 l x y F)
(or (p_a3_1 l x y G)
(or (p_a3_1 l x y H)
(or (p_a3_1 l x y I)
(or (p_a3_1 l x y J)
(or (p_a3_1 l x y K)
(or (p_a3_1 l x y L)
(or (p_a3_1 l x y M)
(or (p_a3_1 l x y N)
     (p_a3_1 l x y O))))))))))))))))

(define-fun e_e_p_a3_1 ((l Line) (x Point)) Bool
(or (e_p_a3_1 l x A)
(or (e_p_a3_1 l x B)
(or (e_p_a3_1 l x C)
(or (e_p_a3_1 l x D)
(or (e_p_a3_1 l x E)
(or (e_p_a3_1 l x F)
(or (e_p_a3_1 l x G)
(or (e_p_a3_1 l x H)
(or (e_p_a3_1 l x I)
(or (e_p_a3_1 l x J)
(or (e_p_a3_1 l x K)
(or (e_p_a3_1 l x L)
(or (e_p_a3_1 l x M)
(or (e_p_a3_1 l x N)
     (e_p_a3_1 l x O))))))))))))))))

(define-fun e_e_e_p_a3_1 ((l Line)) Bool
(or (e_e_p_a3_1 l A)
(or (e_e_p_a3_1 l B)
(or (e_e_p_a3_1 l C)
(or (e_e_p_a3_1 l D)
(or (e_e_p_a3_1 l E)
(or (e_e_p_a3_1 l F)
(or (e_e_p_a3_1 l G)
(or (e_e_p_a3_1 l H)
(or (e_e_p_a3_1 l I)
(or (e_e_p_a3_1 l J)
(or (e_e_p_a3_1 l K)
(or (e_e_p_a3_1 l L)
(or (e_e_p_a3_1 l M)
(or (e_e_p_a3_1 l N)
     (e_e_p_a3_1 l O))))))))))))))))

(assert
(and (e_e_e_p_a3_1 ABC)
(and (e_e_e_p_a3_1 ADE)
(and (e_e_e_p_a3_1 AFG)
(and (e_e_e_p_a3_1 AHI)
(and (e_e_e_p_a3_1 AKJ)
(and (e_e_e_p_a3_1 ALM)
(and (e_e_e_p_a3_1 ANO)
(and (e_e_e_p_a3_1 BEG)
(and (e_e_e_p_a3_1 BIK)
(and (e_e_e_p_a3_1 BMO)
(and (e_e_e_p_a3_1 BHJ)
(and (e_e_e_p_a3_1 BNL)
(and (e_e_e_p_a3_1 BDF)
(and (e_e_e_p_a3_1 CHK)
(and (e_e_e_p_a3_1 CLO)
(and (e_e_e_p_a3_1 CDG)
(and (e_e_e_p_a3_1 CMN)
(and (e_e_e_p_a3_1 CEF)
(and (e_e_e_p_a3_1 CIJ)
(and (e_e_e_p_a3_1 DKO)
(and (e_e_e_p_a3_1 DIM)
(and (e_e_e_p_a3_1 DJN)
(and (e_e_e_p_a3_1 DHL)
(and (e_e_e_p_a3_1 EJO)
(and (e_e_e_p_a3_1 EIL)
(and (e_e_e_p_a3_1 EKN)
(and (e_e_e_p_a3_1 EHM)
(and (e_e_e_p_a3_1 FIO)
(and (e_e_e_p_a3_1 FHN)
(and (e_e_e_p_a3_1 FJL)
(and (e_e_e_p_a3_1 FKM)
(and (e_e_e_p_a3_1 GHO)
(and (e_e_e_p_a3_1 GIN)
(and (e_e_e_p_a3_1 GJM)
(e_e_e_p_a3_1 GKL))))))))))))))))))))))))))))))))))))
(check-sat)
(pop)

(push)
(echo "--- checking a3_2 ---")
(assert (exists ((l1 Line)) (exists ((l2 Line)) (forall ((p Point)) (not (and (i p l1) (i p l2)))))))
(check-sat)
(pop)

(push)
(echo "--- checking a3_3 ---")

(define-fun p_a3_3_inside ((l1 Line) (l2 Line) (l3 Line) (l4 Line) (j1 Point) (j2 Point) (j3 Point)) Bool (and (and (i j1 l1) (i j1 l4)) (and (i j2 l2) (i j2 l4)) (and (i j3 l3) (i j3 l4))))

(define-fun e_p_a3_3_inside ((l1 Line) (l2 Line) (l3 Line) (l4 Line) (j1 Point) (j2 Point)) Bool
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 A)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 B)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 C)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 D)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 E)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 F)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 G)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 H)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 I)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 J)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 K)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 L)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 M)
(or (p_a3_3_inside l1 l2 l3 l4 j1 j2 N)
    (p_a3_3_inside l1 l2 l3 l4 j1 j2 O))))))))))))))))

(define-fun e_e_p_a3_3_inside ((l1 Line) (l2 Line) (l3 Line) (l4 Line) (j1 Point)) Bool
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 A)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 B)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 C)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 D)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 E)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 F)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 G)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 H)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 I)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 J)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 K)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 L)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 M)
(or (e_p_a3_3_inside l1 l2 l3 l4 j1 N)
    (e_p_a3_3_inside l1 l2 l3 l4 j1 O))))))))))))))))


(define-fun e_e_e_p_a3_3_inside ((l1 Line) (l2 Line) (l3 Line) (l4 Line)) Bool
(or (e_e_p_a3_3_inside l1 l2 l3 l4 A)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 B)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 C)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 D)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 E)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 F)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 G)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 H)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 I)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 J)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 K)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 L)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 M)
(or (e_e_p_a3_3_inside l1 l2 l3 l4 N)
     (e_e_p_a3_3_inside l1 l2 l3 l4 O))))))))))))))))

(define-fun es_p_a3_3_inside ((l1 Line) (l2 Line) (l3 Line)) Bool
(or (e_e_e_p_a3_3_inside l1 l2 l3 ABC)
(or (e_e_e_p_a3_3_inside l1 l2 l3 ADE)
(or (e_e_e_p_a3_3_inside l1 l2 l3 AFG)
(or (e_e_e_p_a3_3_inside l1 l2 l3 AHI)
(or (e_e_e_p_a3_3_inside l1 l2 l3 AKJ)
(or (e_e_e_p_a3_3_inside l1 l2 l3 ALM)
(or (e_e_e_p_a3_3_inside l1 l2 l3 ANO)
(or (e_e_e_p_a3_3_inside l1 l2 l3 BEG)
(or (e_e_e_p_a3_3_inside l1 l2 l3 BIK)
(or (e_e_e_p_a3_3_inside l1 l2 l3 BMO)
(or (e_e_e_p_a3_3_inside l1 l2 l3 BHJ)
(or (e_e_e_p_a3_3_inside l1 l2 l3 BNL)
(or (e_e_e_p_a3_3_inside l1 l2 l3 BDF)
(or (e_e_e_p_a3_3_inside l1 l2 l3 CHK)
(or (e_e_e_p_a3_3_inside l1 l2 l3 CLO)
(or (e_e_e_p_a3_3_inside l1 l2 l3 CDG)
(or (e_e_e_p_a3_3_inside l1 l2 l3 CMN)
(or (e_e_e_p_a3_3_inside l1 l2 l3 CEF)
(or (e_e_e_p_a3_3_inside l1 l2 l3 CIJ)
(or (e_e_e_p_a3_3_inside l1 l2 l3 DKO)
(or (e_e_e_p_a3_3_inside l1 l2 l3 DIM)
(or (e_e_e_p_a3_3_inside l1 l2 l3 DJN)
(or (e_e_e_p_a3_3_inside l1 l2 l3 DHL)
(or (e_e_e_p_a3_3_inside l1 l2 l3 EJO)
(or (e_e_e_p_a3_3_inside l1 l2 l3 EIL)
(or (e_e_e_p_a3_3_inside l1 l2 l3 EKN)
(or (e_e_e_p_a3_3_inside l1 l2 l3 EHM)
(or (e_e_e_p_a3_3_inside l1 l2 l3 FIO)
(or (e_e_e_p_a3_3_inside l1 l2 l3 FHN)
(or (e_e_e_p_a3_3_inside l1 l2 l3 FJL)
(or (e_e_e_p_a3_3_inside l1 l2 l3 FKM)
(or (e_e_e_p_a3_3_inside l1 l2 l3 GHO)
(or (e_e_e_p_a3_3_inside l1 l2 l3 GIN)
(or (e_e_e_p_a3_3_inside l1 l2 l3 GJM)
     (e_e_e_p_a3_3_inside l1 l2 l3 GKL))))))))))))))))))))))))))))))))))))

(define-fun p_a3_3 ((l1 Line) (l2 Line) (l3 Line)) Bool  (=> (distinct l1 l2 l3) (es_p_a3_3_inside l1 l2 l3)))

(assert (forall ((l1 Line) (l2 Line) (l3 Line)) (p_a3_3 l1 l2 l3)))
(check-sat)
(pop)

(push)
(echo "--- checking a2: pasch ---")

(define-fun p_a2 ((v Point) (l1 Line) (l2 Line)) Bool  (and (i v l1) (i v l2)))

(define-fun e_p_a2 ((l1 Line) (l2 Line)) Bool
(or (p_a2 A l1 l2)
(or (p_a2 B l1 l2)
(or (p_a2 C l1 l2)
(or (p_a2 D l1 l2)
(or (p_a2 E l1 l2)
(or (p_a2 F l1 l2)
(or (p_a2 G l1 l2)
(or (p_a2 H l1 l2)
(or (p_a2 I l1 l2)
(or (p_a2 J l1 l2)
(or (p_a2 K l1 l2)
(or (p_a2 L l1 l2)
(or (p_a2 M l1 l2)
(or (p_a2 N l1 l2)
     (p_a2 O l1 l2))))))))))))))))

(define-fun e ((x Point) (y Point) (z Point) (t Point) (lAB Line) (lCD Line) (lAC Line) (lBD Line)) Bool
(=>
(and (distinct x y z t)
(and (and (i x lAB) (i y lAB))
(and (and (i z lCD) (i t lCD))
(and (and (i x lAC) (i z lAC))
(and (and (i y lBD) (i t lBD))
(e_p_a2 lAB lCD)))))) (e_p_a2 lAC lBD)))

(define-fun e2 ((x Point) (y Point) (z Point) (t Point) (lAB Line) (lCD Line) (lAC Line)) Bool
(and (e x y z t lAB lCD lAC ABC)
(and (e x y z t lAB lCD lAC ADE)
(and (e x y z t lAB lCD lAC AFG)
(and (e x y z t lAB lCD lAC AHI)
(and (e x y z t lAB lCD lAC AKJ)
(and (e x y z t lAB lCD lAC ALM)
(and (e x y z t lAB lCD lAC ANO)
(and (e x y z t lAB lCD lAC BEG)
(and (e x y z t lAB lCD lAC BIK)
(and (e x y z t lAB lCD lAC BMO)
(and (e x y z t lAB lCD lAC BHJ)
(and (e x y z t lAB lCD lAC BNL)
(and (e x y z t lAB lCD lAC BDF)
(and (e x y z t lAB lCD lAC CHK)
(and (e x y z t lAB lCD lAC CLO)
(and (e x y z t lAB lCD lAC CDG)
(and (e x y z t lAB lCD lAC CMN)
(and (e x y z t lAB lCD lAC CEF)
(and (e x y z t lAB lCD lAC CIJ)
(and (e x y z t lAB lCD lAC DKO)
(and (e x y z t lAB lCD lAC DIM)
(and (e x y z t lAB lCD lAC DJN)
(and (e x y z t lAB lCD lAC DHL)
(and (e x y z t lAB lCD lAC EJO)
(and (e x y z t lAB lCD lAC EIL)
(and (e x y z t lAB lCD lAC EKN)
(and (e x y z t lAB lCD lAC EHM)
(and (e x y z t lAB lCD lAC FIO)
(and (e x y z t lAB lCD lAC FHN)
(and (e x y z t lAB lCD lAC FJL)
(and (e x y z t lAB lCD lAC FKM)
(and (e x y z t lAB lCD lAC GHO)
(and (e x y z t lAB lCD lAC GIN)
(and (e x y z t lAB lCD lAC GJM)
     (e x y z t lAB lCD lAC GKL))))))))))))))))))))))))))))))))))))
     
(define-fun e3 ((x Point) (y Point) (z Point) (t Point) (lAB Line) (lCD Line)) Bool
(and (e2 x y z t lAB lCD ABC)
(and (e2 x y z t lAB lCD ADE)
(and (e2 x y z t lAB lCD AFG)
(and (e2 x y z t lAB lCD AHI)
(and (e2 x y z t lAB lCD AKJ)
(and (e2 x y z t lAB lCD ALM)
(and (e2 x y z t lAB lCD ANO)
(and (e2 x y z t lAB lCD BEG)
(and (e2 x y z t lAB lCD BIK)
(and (e2 x y z t lAB lCD BMO)
(and (e2 x y z t lAB lCD BHJ)
(and (e2 x y z t lAB lCD BNL)
(and (e2 x y z t lAB lCD BDF)
(and (e2 x y z t lAB lCD CHK)
(and (e2 x y z t lAB lCD CLO)
(and (e2 x y z t lAB lCD CDG)
(and (e2 x y z t lAB lCD CMN)
(and (e2 x y z t lAB lCD CEF)
(and (e2 x y z t lAB lCD CIJ)
(and (e2 x y z t lAB lCD DKO)
(and (e2 x y z t lAB lCD DIM)
(and (e2 x y z t lAB lCD DJN)
(and (e2 x y z t lAB lCD DHL)
(and (e2 x y z t lAB lCD EJO)
(and (e2 x y z t lAB lCD EIL)
(and (e2 x y z t lAB lCD EKN)
(and (e2 x y z t lAB lCD EHM)
(and (e2 x y z t lAB lCD FIO)
(and (e2 x y z t lAB lCD FHN)
(and (e2 x y z t lAB lCD FJL)
(and (e2 x y z t lAB lCD FKM)
(and (e2 x y z t lAB lCD GHO)
(and (e2 x y z t lAB lCD GIN)
(and (e2 x y z t lAB lCD GJM)
     (e2 x y z t lAB lCD GKL))))))))))))))))))))))))))))))))))))

(define-fun e4 ((x Point) (y Point) (z Point) (t Point) (lAB Line) ) Bool
(and (e3 x y z t lAB ABC)
(and (e3 x y z t lAB ADE)
(and (e3 x y z t lAB AFG)
(and (e3 x y z t lAB AHI)
(and (e3 x y z t lAB AKJ)
(and (e3 x y z t lAB ALM)
(and (e3 x y z t lAB ANO)
(and (e3 x y z t lAB BEG)
(and (e3 x y z t lAB BIK)
(and (e3 x y z t lAB BMO)
(and (e3 x y z t lAB BHJ)
(and (e3 x y z t lAB BNL)
(and (e3 x y z t lAB BDF)
(and (e3 x y z t lAB CHK)
(and (e3 x y z t lAB CLO)
(and (e3 x y z t lAB CDG)
(and (e3 x y z t lAB CMN)
(and (e3 x y z t lAB CEF)
(and (e3 x y z t lAB CIJ)
(and (e3 x y z t lAB DKO)
(and (e3 x y z t lAB DIM)
(and (e3 x y z t lAB DJN)
(and (e3 x y z t lAB DHL)
(and (e3 x y z t lAB EJO)
(and (e3 x y z t lAB EIL)
(and (e3 x y z t lAB EKN)
(and (e3 x y z t lAB EHM)
(and (e3 x y z t lAB FIO)
(and (e3 x y z t lAB FHN)
(and (e3 x y z t lAB FJL)
(and (e3 x y z t lAB FKM)
(and (e3 x y z t lAB GHO)
(and (e3 x y z t lAB GIN)
(and (e3 x y z t lAB GJM)
     (e3 x y z t lAB GKL))))))))))))))))))))))))))))))))))))

(define-fun expr ((x Point) (y Point) (z Point) (t Point)) Bool
(and (e4 x y z t ABC)
(and (e4 x y z t ADE)
(and (e4 x y z t AFG)
(and (e4 x y z t AHI)
(and (e4 x y z t AKJ)
(and (e4 x y z t ALM)
(and (e4 x y z t ANO)
(and (e4 x y z t BEG)
(and (e4 x y z t BIK)
(and (e4 x y z t BMO)
(and (e4 x y z t BHJ)
(and (e4 x y z t BNL)
(and (e4 x y z t BDF)
(and (e4 x y z t CHK)
(and (e4 x y z t CLO)
(and (e4 x y z t CDG)
(and (e4 x y z t CMN)
(and (e4 x y z t CEF)
(and (e4 x y z t CIJ)
(and (e4 x y z t DKO)
(and (e4 x y z t DIM)
(and (e4 x y z t DJN)
(and (e4 x y z t DHL)
(and (e4 x y z t EJO)
(and (e4 x y z t EIL)
(and (e4 x y z t EKN)
(and (e4 x y z t EHM)
(and (e4 x y z t FIO)
(and (e4 x y z t FHN)
(and (e4 x y z t FJL)
(and (e4 x y z t FKM)
(and (e4 x y z t GHO)
(and (e4 x y z t GIN)
(and (e4 x y z t GJM)
     (e4 x y z t GKL))))))))))))))))))))))))))))))))))))

(define-fun f_expr ((x Point) (y Point) (z Point)) Bool
(and (expr x y z A)
(and (expr x y z B)
(and (expr x y z C)
(and (expr x y z D)
(and (expr x y z E)
(and (expr x y z F)
(and (expr x y z G)
(and (expr x y z H)
(and (expr x y z I)
(and (expr x y z J)
(and (expr x y z K)
(and (expr x y z L)
(and (expr x y z M)
(and (expr x y z N)
     (expr x y z O))))))))))))))))

(define-fun f_f_expr ((x Point) (y Point)) Bool
(and (f_expr x y A)
(and (f_expr x y B)
(and (f_expr x y C)
(and (f_expr x y D)
(and (f_expr x y E)
(and (f_expr x y F)
(and (f_expr x y G)
(and (f_expr x y H)
(and (f_expr x y I)
(and (f_expr x y J)
(and (f_expr x y K)
(and (f_expr x y L)
(and (f_expr x y M)
(and (f_expr x y N)
     (f_expr x y O))))))))))))))))

(define-fun f_f_f_expr ((x Point)) Bool
(and (f_f_expr x A)
(and (f_f_expr x B)
(and (f_f_expr x C)
(and (f_f_expr x D)
(and (f_f_expr x E)
(and (f_f_expr x F)
(and (f_f_expr x G)
(and (f_f_expr x H)
(and (f_f_expr x I)
(and (f_f_expr x J)
(and (f_f_expr x K)
(and (f_f_expr x L)
(and (f_f_expr x M)
(and (f_f_expr x N)
     (f_f_expr x O))))))))))))))))
	
(assert (f_f_f_expr A))
;(and (f_f_f_expr A)
;(and (f_f_f_expr B)
;(and (f_f_f_expr C)
;(and (f_f_f_expr D)
;(and (f_f_f_expr E)
;(and (f_f_f_expr F)
;(and (f_f_f_expr G)
;(and (f_f_f_expr H)
;(and (f_f_f_expr I)
;(and (f_f_f_expr J)
;(and (f_f_f_expr K)
;(and (f_f_f_expr L)
;(and (f_f_f_expr M)
;(and (f_f_f_expr N)
;        (f_f_f_expr O))))))))))))))))
(check-sat)
(pop)

(echo "--- the end ---")


